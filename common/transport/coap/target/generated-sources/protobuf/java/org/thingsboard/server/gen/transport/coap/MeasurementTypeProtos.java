// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_measurement_types.proto

package org.thingsboard.server.gen.transport.coap;

public final class MeasurementTypeProtos {
  private MeasurementTypeProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code MeasurementType}
   */
  public enum MeasurementType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NO_SENSOR = 0;</code>
     */
    NO_SENSOR(0),
    /**
     * <pre>
     * [째C] - Celsius degree. Resolution 0.1째C. Range [-273.2-4000.0]. Type: Continuous                                     
     * </pre>
     *
     * <code>TEMPERATURE = 1;</code>
     */
    TEMPERATURE(1),
    /**
     * <pre>
     * [% RH] - Relative humidity. Resolution 1%. Range [0-100]. Type: Continuous                                           
     * </pre>
     *
     * <code>HUMIDITY = 2;</code>
     */
    HUMIDITY(2),
    /**
     * <pre>
     * [hPa] - Hectopascal (1hPa = 100Pa). Resolution 0.1hPa. Range: [1.0-2000.0]. Type: Continuous                         
     * </pre>
     *
     * <code>ATMOSPHERIC_PRESSURE = 3;</code>
     */
    ATMOSPHERIC_PRESSURE(3),
    /**
     * <pre>
     * [Pa] - Pascal. Resolution 1Pa. Range [-10000-10000]Type: Continuous                                                  
     * </pre>
     *
     * <code>DIFFERENTIAL_PRESSURE = 4;</code>
     */
    DIFFERENTIAL_PRESSURE(4),
    /**
     * <pre>
     * Sign indicates state: (+) ALARM, (-) OK. Type: Binary                                                                
     * </pre>
     *
     * <code>OK_ALARM = 5;</code>
     */
    OK_ALARM(5),
    /**
     * <pre>
     * Type: Continuous                                                                                                     
     * </pre>
     *
     * <code>IAQ = 6;</code>
     */
    IAQ(6),
    /**
     * <pre>
     * Sign indicates water presence: (+) water not detected, (-) water detected. Type: Binary                              
     * </pre>
     *
     * <code>FLOODING = 7;</code>
     */
    FLOODING(7),
    /**
     * <pre>
     * [NB] Number of pulses. Resolution 1 pulse. Range [0-16711679]. Type: Continuous                                      
     * </pre>
     *
     * <code>PULSE_CNT = 8;</code>
     */
    PULSE_CNT(8),
    /**
     * <pre>
     * [Wh] - Watthour; Resolution 1Wh. Range [0-16711679]. Number of Watthours in a single period. Type: Continuous        
     * </pre>
     *
     * <code>ELECTRICITY_METER = 9;</code>
     */
    ELECTRICITY_METER(9),
    /**
     * <pre>
     * [l] - Liter. Resolution 1l. Range [0-16711679]. Number of litres in a single period. Type: Continuous                
     * </pre>
     *
     * <code>WATER_METER = 10;</code>
     */
    WATER_METER(10),
    /**
     * <pre>
     * [kPa] - Kilopascal (1kPa = 1000Pa); Resolution 1kPa. Range [-1000-0]. Soil moisture (tension). Type: Continuous       
     * </pre>
     *
     * <code>SOIL_MOISTURE = 11;</code>
     */
    SOIL_MOISTURE(11),
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 1ppm. Range [0-1000000]. Carbon monoxide concentration. Type: Continuous       
     * </pre>
     *
     * <code>CO_GAS = 12;</code>
     */
    CO_GAS(12),
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 0.01ppm. Range [0-1000000.00]. Nitrogen dioxide concentration. Type: Continuous
     * </pre>
     *
     * <code>NO2_GAS = 13;</code>
     */
    NO2_GAS(13),
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 1ppm. Range [0-1000000]. Hydrogen sulfide concentration. Type: Continuous      
     * </pre>
     *
     * <code>H2S_GAS = 14;</code>
     */
    H2S_GAS(14),
    /**
     * <pre>
     * [lx] - Illuminance. Resolution 0.1lx. Range [0-100000.0]. Type: Continuous                                           
     * </pre>
     *
     * <code>AMBIENT_LIGHT = 15;</code>
     */
    AMBIENT_LIGHT(15),
    /**
     * <pre>
     * particles with an aerodynamic diameter less than 1 micrometer. Type: Continuous                                      
     * </pre>
     *
     * <code>PM_1_0 = 16;</code>
     */
    PM_1_0(16),
    /**
     * <pre>
     * particles with an aerodynamic diameter less than 2.5 micrometers. Type: Continuous                                   
     * </pre>
     *
     * <code>PM_2_5 = 17;</code>
     */
    PM_2_5(17),
    /**
     * <pre>
     * particles with an aerodynamic diameter less than 10 micrometers. Type: Continuous                                    
     * </pre>
     *
     * <code>PM_10_0 = 18;</code>
     */
    PM_10_0(18),
    /**
     * <pre>
     * [dB] - Decibels. Resolution 0.1 dB. Range: [0-130.0]. Noise level. Type: Continuous                                  
     * </pre>
     *
     * <code>NOISE_LEVEL = 19;</code>
     */
    NOISE_LEVEL(19),
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 1ppm. Range [0-1000000]. Ammonia concentration. Type: Continuous               
     * </pre>
     *
     * <code>NH3_GAS = 20;</code>
     */
    NH3_GAS(20),
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 1ppm. Range [0-1000000]. Methane concentration. Type: Continuous               
     * </pre>
     *
     * <code>CH4_GAS = 21;</code>
     */
    CH4_GAS(21),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>NO_SENSOR = 0;</code>
     */
    public static final int NO_SENSOR_VALUE = 0;
    /**
     * <pre>
     * [째C] - Celsius degree. Resolution 0.1째C. Range [-273.2-4000.0]. Type: Continuous                                     
     * </pre>
     *
     * <code>TEMPERATURE = 1;</code>
     */
    public static final int TEMPERATURE_VALUE = 1;
    /**
     * <pre>
     * [% RH] - Relative humidity. Resolution 1%. Range [0-100]. Type: Continuous                                           
     * </pre>
     *
     * <code>HUMIDITY = 2;</code>
     */
    public static final int HUMIDITY_VALUE = 2;
    /**
     * <pre>
     * [hPa] - Hectopascal (1hPa = 100Pa). Resolution 0.1hPa. Range: [1.0-2000.0]. Type: Continuous                         
     * </pre>
     *
     * <code>ATMOSPHERIC_PRESSURE = 3;</code>
     */
    public static final int ATMOSPHERIC_PRESSURE_VALUE = 3;
    /**
     * <pre>
     * [Pa] - Pascal. Resolution 1Pa. Range [-10000-10000]Type: Continuous                                                  
     * </pre>
     *
     * <code>DIFFERENTIAL_PRESSURE = 4;</code>
     */
    public static final int DIFFERENTIAL_PRESSURE_VALUE = 4;
    /**
     * <pre>
     * Sign indicates state: (+) ALARM, (-) OK. Type: Binary                                                                
     * </pre>
     *
     * <code>OK_ALARM = 5;</code>
     */
    public static final int OK_ALARM_VALUE = 5;
    /**
     * <pre>
     * Type: Continuous                                                                                                     
     * </pre>
     *
     * <code>IAQ = 6;</code>
     */
    public static final int IAQ_VALUE = 6;
    /**
     * <pre>
     * Sign indicates water presence: (+) water not detected, (-) water detected. Type: Binary                              
     * </pre>
     *
     * <code>FLOODING = 7;</code>
     */
    public static final int FLOODING_VALUE = 7;
    /**
     * <pre>
     * [NB] Number of pulses. Resolution 1 pulse. Range [0-16711679]. Type: Continuous                                      
     * </pre>
     *
     * <code>PULSE_CNT = 8;</code>
     */
    public static final int PULSE_CNT_VALUE = 8;
    /**
     * <pre>
     * [Wh] - Watthour; Resolution 1Wh. Range [0-16711679]. Number of Watthours in a single period. Type: Continuous        
     * </pre>
     *
     * <code>ELECTRICITY_METER = 9;</code>
     */
    public static final int ELECTRICITY_METER_VALUE = 9;
    /**
     * <pre>
     * [l] - Liter. Resolution 1l. Range [0-16711679]. Number of litres in a single period. Type: Continuous                
     * </pre>
     *
     * <code>WATER_METER = 10;</code>
     */
    public static final int WATER_METER_VALUE = 10;
    /**
     * <pre>
     * [kPa] - Kilopascal (1kPa = 1000Pa); Resolution 1kPa. Range [-1000-0]. Soil moisture (tension). Type: Continuous       
     * </pre>
     *
     * <code>SOIL_MOISTURE = 11;</code>
     */
    public static final int SOIL_MOISTURE_VALUE = 11;
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 1ppm. Range [0-1000000]. Carbon monoxide concentration. Type: Continuous       
     * </pre>
     *
     * <code>CO_GAS = 12;</code>
     */
    public static final int CO_GAS_VALUE = 12;
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 0.01ppm. Range [0-1000000.00]. Nitrogen dioxide concentration. Type: Continuous
     * </pre>
     *
     * <code>NO2_GAS = 13;</code>
     */
    public static final int NO2_GAS_VALUE = 13;
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 1ppm. Range [0-1000000]. Hydrogen sulfide concentration. Type: Continuous      
     * </pre>
     *
     * <code>H2S_GAS = 14;</code>
     */
    public static final int H2S_GAS_VALUE = 14;
    /**
     * <pre>
     * [lx] - Illuminance. Resolution 0.1lx. Range [0-100000.0]. Type: Continuous                                           
     * </pre>
     *
     * <code>AMBIENT_LIGHT = 15;</code>
     */
    public static final int AMBIENT_LIGHT_VALUE = 15;
    /**
     * <pre>
     * particles with an aerodynamic diameter less than 1 micrometer. Type: Continuous                                      
     * </pre>
     *
     * <code>PM_1_0 = 16;</code>
     */
    public static final int PM_1_0_VALUE = 16;
    /**
     * <pre>
     * particles with an aerodynamic diameter less than 2.5 micrometers. Type: Continuous                                   
     * </pre>
     *
     * <code>PM_2_5 = 17;</code>
     */
    public static final int PM_2_5_VALUE = 17;
    /**
     * <pre>
     * particles with an aerodynamic diameter less than 10 micrometers. Type: Continuous                                    
     * </pre>
     *
     * <code>PM_10_0 = 18;</code>
     */
    public static final int PM_10_0_VALUE = 18;
    /**
     * <pre>
     * [dB] - Decibels. Resolution 0.1 dB. Range: [0-130.0]. Noise level. Type: Continuous                                  
     * </pre>
     *
     * <code>NOISE_LEVEL = 19;</code>
     */
    public static final int NOISE_LEVEL_VALUE = 19;
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 1ppm. Range [0-1000000]. Ammonia concentration. Type: Continuous               
     * </pre>
     *
     * <code>NH3_GAS = 20;</code>
     */
    public static final int NH3_GAS_VALUE = 20;
    /**
     * <pre>
     * [ppm] - Parts per million. Resolution 1ppm. Range [0-1000000]. Methane concentration. Type: Continuous               
     * </pre>
     *
     * <code>CH4_GAS = 21;</code>
     */
    public static final int CH4_GAS_VALUE = 21;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MeasurementType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static MeasurementType forNumber(int value) {
      switch (value) {
        case 0: return NO_SENSOR;
        case 1: return TEMPERATURE;
        case 2: return HUMIDITY;
        case 3: return ATMOSPHERIC_PRESSURE;
        case 4: return DIFFERENTIAL_PRESSURE;
        case 5: return OK_ALARM;
        case 6: return IAQ;
        case 7: return FLOODING;
        case 8: return PULSE_CNT;
        case 9: return ELECTRICITY_METER;
        case 10: return WATER_METER;
        case 11: return SOIL_MOISTURE;
        case 12: return CO_GAS;
        case 13: return NO2_GAS;
        case 14: return H2S_GAS;
        case 15: return AMBIENT_LIGHT;
        case 16: return PM_1_0;
        case 17: return PM_2_5;
        case 18: return PM_10_0;
        case 19: return NOISE_LEVEL;
        case 20: return NH3_GAS;
        case 21: return CH4_GAS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MeasurementType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MeasurementType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MeasurementType>() {
            public MeasurementType findValueByNumber(int number) {
              return MeasurementType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.thingsboard.server.gen.transport.coap.MeasurementTypeProtos.getDescriptor().getEnumTypes().get(0);
    }

    private static final MeasurementType[] VALUES = values();

    public static MeasurementType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MeasurementType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:MeasurementType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035proto_measurement_types.proto*\354\002\n\017Meas" +
      "urementType\022\r\n\tNO_SENSOR\020\000\022\017\n\013TEMPERATUR" +
      "E\020\001\022\014\n\010HUMIDITY\020\002\022\030\n\024ATMOSPHERIC_PRESSUR" +
      "E\020\003\022\031\n\025DIFFERENTIAL_PRESSURE\020\004\022\014\n\010OK_ALA" +
      "RM\020\005\022\007\n\003IAQ\020\006\022\014\n\010FLOODING\020\007\022\r\n\tPULSE_CNT" +
      "\020\010\022\025\n\021ELECTRICITY_METER\020\t\022\017\n\013WATER_METER" +
      "\020\n\022\021\n\rSOIL_MOISTURE\020\013\022\n\n\006CO_GAS\020\014\022\013\n\007NO2" +
      "_GAS\020\r\022\013\n\007H2S_GAS\020\016\022\021\n\rAMBIENT_LIGHT\020\017\022\n" +
      "\n\006PM_1_0\020\020\022\n\n\006PM_2_5\020\021\022\013\n\007PM_10_0\020\022\022\017\n\013N" +
      "OISE_LEVEL\020\023\022\013\n\007NH3_GAS\020\024\022\013\n\007CH4_GAS\020\025BB" +
      "\n)org.thingsboard.server.gen.transport.c" +
      "oapB\025MeasurementTypeProtosb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
